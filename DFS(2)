#include <string>
#include <vector>

using namespace std;

// DFS
bool dfs(vector<vector<int>>& computers, int n) {
    
    //이미 순회한 노드라면 리턴(재귀함수 탈출조건)
    if (!computers[n][n])    
        return false;
    
    //순회했다고 변경하기
    computers[n][n] = 0;
    
    //노드수만큼 반복
    for (int i = 0; i < computers.size(); i++) {
        //연결된 노드가 있다면 재귀
        if (computers[n][i])    
            dfs(computers, i);
    }
    
    return true;
}

int solution(int n, vector<vector<int>> computers) {
    int answer = 0;
    
    // 배열의 인수가 1인 경우의 인덱스를 확인 -> computer[i][j] -> computer[j][i]도 1인지 확인 = 연결된 상태임
    // 대신 00, 11, 22 ... 와 같은 자기 자신을 인덱스로 가지는 1 값을 가짐
    // 배열 중 자기 자신 인덱스만을 1로 가지는 경우, answer +1
    
    /*for (int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            if(computers[i][j] == 0){
                if(computers[j][i] == 0){
                    answer++;
                }
            }
        }
    }
    answer = answer/2;*/
    
     for (int i = 0; i < n; i++) {
         //순회하지 않은 노드라면 dfs탐색후 answer증가
        if (computers[i][i] && dfs(computers, i))        
            answer++;
    }
    
    
    return answer;
}
