#include <string>
#include <vector>

using namespace std;

int solution(int m, int n, vector<vector<int>> puddles) {
    // 물에 잠긴 지역의 거리는 이동이 불가능 -> 경우의 수가 그대로 유지됨
    // 오른쪽으로 +1 할 경우, 주어진 puddle과 같은 값을 가지는 지 확인
    // 아래로 +1 하는 경우도 마찬가지
    // 오른쪽으로 이동 횟수 <= m, 왼쪽으로 이동 횟수 <= n
    
    // <구현>
    // 아래로 이동 +1 -> 물 -> 아래로 이동 +1(n=2이므로 이동 횟수와 동일) -> 오른쪽으로 이동 +1 (m과 크기가 동일할 때까지)
    vector<vector<int>> board(n+1, vector<int>(m+1, 1));

    for(int i = 0; i < puddles.size(); i++) {
        int y = puddles[i][1];
        int x = puddles[i][0];

        // 잠긴 지역 0으로 표시
        board[y][x] = 0;

        // 오른쪽으로 이동이 불가능한 경우
        if(x == 1) {
            // 오른쪽 행을 모두 0으로 바꿈 -> 이동이 불가능
            for(int j = y; j <=n; j++)
                board[j][1] = 0;
        }

        // 아래로 이동이 불가능한 경우
        if(y == 1) {
            // 아래 열을 모두 0으로 바꿈 -> 이동이 불가능
            for(int j = x; j <= m; j++)
                board[1][j] = 0;
        }
    }

    // 오른쪽, 아래 모두 2부터 시작
    for(int y = 2; y <= n; y++) {
        for(int x = 2; x <= m; x++) {
            if(board[y][x] == 0) continue;

            // 최단거리 구하는 공식
            board[y][x] = (board[y-1][x] + board[y][x-1]) % 1000000007;
        }
    }

    return board[n][m];
}
